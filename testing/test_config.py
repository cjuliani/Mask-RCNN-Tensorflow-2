import os
import re

PROJECT_NAME = "Mask RCNN TensorFlow 2"
PROJECT_PATH = os.path.dirname(os.path.abspath("."))
if PROJECT_NAME not in PROJECT_PATH:
    PROJECT_PATH = os.path.join(PROJECT_PATH, PROJECT_NAME)
else:
    m = re.search('(.*)'+PROJECT_NAME, PROJECT_PATH)
    PROJECT_PATH = m.group(0)

UNIT_TESTS_FOLDER = os.path.join(PROJECT_PATH, "testing")
RESULTS_FOLDER = os.path.join(UNIT_TESTS_FOLDER, "results")
UNIT_TESTS_DATA_PATH = os.path.join(UNIT_TESTS_FOLDER, "data")
UNIT_TESTS_WEIGHTS_PATH = os.path.join(UNIT_TESTS_FOLDER, "model_weights")

# ----- TRAIN
MODEL_NAME = "model_001"
LEARNING_RATE = 1e-4
INPUT_SIZE = (512, 512)
METRIC_RESET_STEP = 1
ADAM_OPTIMIZER = True
CLASSES_TO_LEARN = ['plane', 'ship']
CATEGORIES_TO_LEARN = [4, 5]
DATA_FOLDER = r"data/iSAID-DOTAv1"
NUM_CLASSES = len(CLASSES_TO_LEARN) + 1
SUM_NUM_BOXES_TO_SHOW = 20
SUM_BOXES_MIN_SCORE = 0.5
AUGMENT = True
NUM_SAVING_PER_EPOCH = 1
EPOCHS = 1
SUMMARY_STEP = 1
VALIDATION_STEP = 1
BATCH_SIZE = 1
LR_DECAY = False
LR_DECAY_STEPS = 100
LR_DECAY_RATE = 0.9
LR_DECAY_STAIRCASE = True
MINIMUM_LEARNING_RATE = 5e-6
MOMENTUM = 0.9
NESTEROV = True
LR_CYCLIC = True
CYCLIC_STEP_SIZE = 50
CYCLIC_GAMMA = 0.9991
TRANSLATION_RATE = (0, 9, 3)  # range parameters
DIRECTION = [-1, 1]
ANGLE = (0, 360, 90)  # range parameters
SCALING = [0.8, 0.9, 1.0, 1.2, 1.4]
SAVE_WEIGHTS_PATH = os.path.join(RESULTS_FOLDER, "save")
SUMMARY_PATH = os.path.join(RESULTS_FOLDER, "summary")
MODEL_FOLDER_TO_RESTORE = "rcnn"
MODEL_TO_RESTORE = "weights_epoch-X_step-X_date-time"

# ----- MODEL
ANCHOR_SCALES = [16, 32, 64]
ANCHOR_RATIOS = [0.5, 1, 1.5, 2]
RPN_BATCH_SIZE = 64
ANCHOR_DENSITY_LEVEL = 2
RPN_RESAMPLE_POSITIVES = True
RPN_RESAMPLE_RATE = 0.5
RPN_ANCHOR_FG_THRESH = 0.7
RPN_ANCHOR_BG_THRESH = 0.3
RPN_FG_RATIO = 0.5
MAX_RPN_PRE_NMS_TOP_N_RATIO = 0.6
MAX_RPN_POST_NMS_TOP_N = 2000
TEST_MAX_RPN_POST_NMS_TOP_N = 128
NMS_THRESH = 0.7
NMS_SIGMA = 0.
BBOX_NORMALIZE_TARGETS = False
BBOX_NORM_MEAN = (0.0, 0.0, 0.0, 0.0)
BBOX_NORM_STD = (1., 1., 0.1, 0.1)
HEAD_PRE_POOL_SIZE = 7
HEAD_FG_THRESH = 0.5
HEAD_BG_THRESH_HI = 0.4
HEAD_BG_THRESH_LO = 0.1
HEAD_BATCH_SIZE = 64
HEAD_RESAMPLE_POSITIVES = True
HEAD_FG_RATE = 0.5
BACKBONE_MODEL = 'resnet101'
RPN_LOSS_WEIGHTS = (1, 30.)
RPN_NEG_POS_WEIGHTS = (1., 1., 1.)
RPN_EASY_NEG_WEIGHTING = True
HEAD_LOSS_WEIGHTS = (1., 500.)
BG_OBJ_WEIGHTS = (2., 1., 1.)
LOAD_IMAGENET_WEIGHTS = True
LOAD_BACKBONE_WEIGHTS = True
LOAD_RPN_WEIGHTS = True
LOAD_HEAD_WEIGHTS = True
LOAD_MASK_WEIGHTS = True
LOAD_CHECKPOINT = True
TRAIN_BACKBONE = False
TRAIN_RPN = True
TRAIN_HEAD = True
TRAIN_HEAD_CLS = True
TRAIN_HEAD_REG = True
TRAIN_MASK = True
BACKBONE_REG_COEF = 1e-5
RPN_REG_COEF = 1e-5
HEAD_REG_COEF = 1e-5
RPN_LABEL_SMOOTHING = False
HEAD_LABEL_SMOOTHING = False
SMOOTH_FACTOR = 0.1
PATH_IMAGENET_WEIGHTS = os.path.join(PROJECT_PATH, 'src/modules/networks/weights/')
BACKBONE_PATH = os.path.join(PROJECT_PATH, 'src/modules/networks/')